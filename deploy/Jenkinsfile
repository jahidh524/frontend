pipeline {
    agent any
    
    environment {
        REGISTRY="img-regv2.oss.net.bd"
        DEPLOYMENT_ENV="dev"
        IMAGE_CREATED_BY="jenkins"
        PROJECT_NAME="qpro-frontend"
        K8S_NAMESPACE="uat-qpro"

        HARBOR_PROJECT_NAME="qpro-website"

        //Port configuration
        K8S_CONTAINER_AND_TARGET_PORT="80"
        
        K8S_SERVICE_PORT="80"
        
    
        SERVICE_PORT_NAME="http"
               
        GIT_TAG=sh(returnStdout: true, script: '''        
            echo $(git describe --tags)
        ''').trim()
     
        //Host specific configuration
        HOST_VOLUME_LOCATION="$JENKINS_DATA_LOCATION"
        M2_REPO="$JENKINS_DATA_LOCATION/.m2"

        PROJECT_LOCATION="$HOST_VOLUME_LOCATION/workspace/$JOB_NAME"
        IMAGE_VERSION="$BUILD_NUMBER-$IMAGE_CREATED_BY-$GIT_TAG-$DEPLOYMENT_ENV"
        IMAGE_REPOSITORY_NAME="$REGISTRY/$HARBOR_PROJECT_NAME/$PROJECT_NAME"
        DOCKER_TAG="$IMAGE_REPOSITORY_NAME:$IMAGE_VERSION"
        DEPLOYMENT_DIRECTORY="./deploy"
        
        //k8s cluster specific configuration
        K8S_SERVICE_NAME="$PROJECT_NAME"
        K8S_CHANGE_CAUSE="$IMAGE_VERSION"

        dockerImage = ''
        dockerRegistryCredential='img-regv2.oss.net.bd'
        DOCKER_REGISTRY_URL="https://$REGISTRY"
    

    }

    stages {
    
     stage('Init') {
            steps {
                sh '''
                COMMIT_ID=$(git log -1|head -1|awk -F ' ' ' {print $NF}')
                echo "........result of commit .... $COMMIT_ID"
                '''
            }
        }
 
      
     stage('Building Docker image') { 
            steps { 
                script { 
                dockerImage = docker.build("$DOCKER_TAG", "-f ./Dockerfile .")
                }
                sh '''
                docker images|grep $PROJECT_NAME
                '''
        } 
    }
    

        stage('Push docker image') {
            steps{
                script {
                    docker.withRegistry( "$DOCKER_REGISTRY_URL", dockerRegistryCredential ) {
                    dockerImage.push()
                    sh "docker images | grep $IMAGE_REPOSITORY_NAME"
                }
                
            }
        }
    }
        stage('Clear image from local after push to Registry') {
            steps {
                echo "Cleaning local docker registry $IMAGE_REPOSITORY_NAME"
                sh '''
                docker rmi -f $(docker images | grep $IMAGE_REPOSITORY_NAME | awk -F' ' '{print $3}')
                '''
        }
    }
        stage('Deploy Pod') {
            steps {
                 kubeconfig(credentialsId: 'imp-k8s-cluster', serverUrl: '',  caCertificate: '') {
                 sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-deploy.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-deploy.yaml | kubectl apply -f -
                '''
                 }
        }
    }
        stage('Deploy Service') {
            steps {
                kubeconfig(credentialsId: 'imp-k8s-cluster', serverUrl: '',  caCertificate: '') {
                sh '''
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-service.yaml | xargs -I{} echo {}
                envsubst < $DEPLOYMENT_DIRECTORY/$DEPLOYMENT_ENV/k8s-service.yaml | kubectl apply -f -
                '''
                }
            } 
        }    
        }                    
    }
